import os
import logging
import joblib
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def monitor_and_report(data, column_id):
    """
    Loads a trained model and scaler, makes a prediction on the latest data,
    and generates an energy-quality monitoring report.
    """
    logging.info(f"--- Starting Energy-Quality Monitoring for {column_id} ---")

    # Define the paths for the trained model and scaler
    from config_R00 import MODEL_PATH
    model_dir = os.path.join(MODEL_PATH, column_id)
    model_path = os.path.join(model_dir, 'model.joblib')
    scaler_path = os.path.join(model_dir, 'scaler.joblib')

    # Check if the trained model and scaler files exist
    if not os.path.exists(model_path) or not os.path.exists(scaler_path):
        logging.error(f"Trained model or scaler not found for {column_id}. Please run the 'train' command first.")
        # Generate a report with NaN values to show the user the problem
        generate_report(column_id, None, float('nan'), float('nan'))
        return

    try:
        # Load the trained model and scaler
        model = joblib.load(model_path)
        scaler = joblib.load(scaler_path)

        logging.info(f"Model and scaler for {column_id} loaded successfully.")
        
        # Get the latest data point from the processed data
        latest_data = data.iloc[[-1]]

        # Prepare the features for prediction
        # We drop the target ('gc_stream') and the actual EQ_Ratio
        features = latest_data.drop(columns=['gc_stream', 'EQ_Ratio'], errors='ignore')
        
        # Scale the features using the loaded scaler
        scaled_features = scaler.transform(features)
        
        # Make a prediction
        predicted_eq_ratio = model.predict(scaled_features)[0]

        # Get the actual EQ_Ratio for comparison
        actual_eq_ratio = latest_data['EQ_Ratio'].iloc[0]
        
        # Calculate the difference
        difference = predicted_eq_ratio - actual_eq_ratio
        
        logging.info(f"Prediction for {column_id} successful.")

        # Generate and print the report
        generate_report(column_id, actual_eq_ratio, predicted_eq_ratio, difference)

    except Exception as e:
        logging.error(f"An error occurred during monitoring for {column_id}: {e}")
        # Generate a report with NaN values if an error occurs
        generate_report(column_id, None, float('nan'), float('nan'))
        

def generate_report(column_id, actual_eq, predicted_eq, diff):
    """
    Creates a simple formatted report for the user.
    """
    report = f"""
Energy-Quality Monitoring Report for {column_id}
Actual EQ_Ratio: {actual_eq:.4f}
Predicted EQ_Ratio: {predicted_eq:.4f}
Difference: {diff:.4f}

This report was automatically generated by the energy-quality analysis script.
"""
    print(report)
